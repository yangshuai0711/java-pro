package com.mocoder.moddns.client.config;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URISyntaxException;
import java.util.Properties;

import com.mocoder.moddns.client.util.ClientLogger;
import com.mocoder.moddns.common.util.Logger.LogLevel;

public class SystemConfig {

	private static final ClientLogger log = ClientLogger.getInstance(SystemConfig.class);
	public static final String PROTOCOL_HEADER_DDNS = "DDNS";
	public static final String INNER_CONFIG_FILE_PATH = "default.properties";
	public static final String CONFIG_FILE_PATH = "config.properties";

	private static InputStream configStream;

	private static String remote_server_domain;
	private static String ddns_server_ip;
	private static int ddns_server_port;
	private static String personal_domain;

	private static String local_server_host;
	private static int local_server_port;

	private static String log_level;
	private static String log_path;

	private static int request_timeout;
	private static int idle_before_exit;
	private static int error_count_before_exit;
	private static int buffer_size;

	private static Properties properties;

	private static String user_id;
	private static String password;

	private static int monitor_cycle;

	private SystemConfig() {

	}

	public static void init() throws IOException {
		properties = new Properties();
		reload();
		ClientLogger.init(LogLevel.valueOf(SystemConfig.getLogLevel().toUpperCase()), SystemConfig.getLogPath());
	}

	public static void saveConfig() throws URISyntaxException, IOException {
		log.info("正在保存配置...");
		if (!validateValueChange()) {
			log.info("配置无变化，无需保存");
			return;
		}
		File file = new File(SystemConfig.class.getClassLoader().getResource("").toURI());
		String path = file.getAbsolutePath() + File.separator + CONFIG_FILE_PATH;
		FileOutputStream output = new FileOutputStream(path);
		properties.store(output, "generated by system ,synchronized with the gui client.you can modify if need");
		log.info("配置保存成功");
		output.close();
	}

	private static boolean validateValueChange() {
		boolean changed = false;
		if (!local_server_host.equals(properties.getProperty("local_server_host"))) {
			changed = true;
			properties.setProperty("local_server_host", local_server_host);
		}
		if (local_server_port != Integer.parseInt(properties.getProperty("local_server_port"))) {
			changed = true;
			properties.setProperty("local_server_port", String.valueOf(local_server_port));
		}
		if (!personal_domain.equals(properties.getProperty("personal_domain"))) {
			changed = true;
			properties.setProperty("personal_domain", personal_domain);
		}
		if (!user_id.equals(properties.getProperty("user_id"))) {
			changed = true;
			properties.setProperty("user_id", user_id);
		}
		if (!password.equals(properties.getProperty("password"))) {
			changed = true;
			properties.setProperty("password", password);
		}
		return changed;
	}

	public static void reload() throws IOException {
		configStream = SystemConfig.class.getClassLoader().getResourceAsStream(CONFIG_FILE_PATH);
		if (configStream == null) {
			configStream = SystemConfig.class.getResourceAsStream(INNER_CONFIG_FILE_PATH);
		}
		properties.clear();
		properties.load(configStream);
		configStream.close();
		remote_server_domain = properties.getProperty("remote_server_domain");
		ddns_server_port = Integer.parseInt(properties.getProperty("ddns_server_port"));

		local_server_host = properties.getProperty("local_server_host");
		local_server_port = Integer.parseInt(properties.getProperty("local_server_port"));
		personal_domain = properties.getProperty("personal_domain");
		user_id = properties.getProperty("user_id");
		password = properties.getProperty("password");

		log_level = properties.getProperty("log_level");
		log_path = properties.getProperty("log_path");
		request_timeout = Integer.parseInt(properties.getProperty("request_timeout", "15000"));
		if (request_timeout < 0) {
			request_timeout = Integer.MAX_VALUE;
		}
		idle_before_exit = Integer.parseInt(properties.getProperty("idle_before_exit", "600000"));
		error_count_before_exit = Integer.parseInt(properties.getProperty("error_count_before_exit", "3"));
		int i = Integer.parseInt(properties.getProperty("buffer_size", "2048"));
		buffer_size = i < 2048 ? 2048 : (i > 10240 ? 10240 : i);
		monitor_cycle = Integer.parseInt(properties.getProperty("monitor_cycle", "1000"));
		ddns_server_ip = properties.getProperty("ddns_server_ip");
	}

	public static String getRemoteServerDomain() {
		return remote_server_domain;
	}

	public static int getRemoteServerPort() {
		return ddns_server_port;
	}

	public static String getPersonalDomain() {
		return personal_domain;
	}

	public static String getLocalServerHost() {
		return local_server_host;
	}

	public static int getLocalServerPort() {
		return local_server_port;
	}

	public static String getLogLevel() {
		return log_level;
	}

	public static String getLogPath() {
		return log_path;
	}

	public static int getRequestTimeout() {
		return request_timeout;
	}

	public static int getIdleBeforeExit() {
		return idle_before_exit;
	}

	public static int getErrorCountBeforeExit() {
		return error_count_before_exit;
	}

	public static int getBufferSize() {
		return buffer_size;
	}

	public static String getUserId() {
		return user_id;
	}

	public static String getPassword() {
		return password;
	}

	public static int getMonitor_cycle() {
		return monitor_cycle;
	}

	public static void setPersonalDomain(String personalDomain) {
		personal_domain = personalDomain;
	}

	public static void setLocalServerHost(String localServerHost) {
		local_server_host = localServerHost;
	}

	public static void setLocalServerPort(int localServerPort) {
		local_server_port = localServerPort;
	}

	public static void setUserId(String userId) {
		user_id = userId;
	}

	public static void setPassword(String password) {
		SystemConfig.password = password;
	}

	public static String getRemote_server_ip() {
		return ddns_server_ip;
	}

}
